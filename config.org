#+TITLE: Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes 

* Core Emacs Configuration
This section incorporates the sensible defaults and settings from the minimal-emacs.d project. This provides a robust and well-optimized foundation.
** Lexical Binding
#+begin_src emacs-lisp
;;; config.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** Package Management
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(setq use-package-always-ensure t
      use-package-expand-minimally t)
#+end_src

** Native Compilation
Ensure adding the following compile-angel code at the very beginning of the *~/.config/emacs/config.org* file, before all other packages.
#+begin_src emacs-lisp
;; Ensure adding the following compile-angel code at the very beginning
;; of your `~/.emacs.d/post-init.el` file, before all other packages.
(use-package compile-angel
  :demand t
  :custom
  (compile-angel-verbose nil)

  :config
  (push "/init.el" compile-angel-excluded-files)
  (push "/early-init.el" compile-angel-excluded-files)
  (push "/config.el" compile-angel-excluded-files)
  (push "/custom.el" compile-angel-excluded-files)
  (compile-angel-on-load-mode))
#+end_src

** General Behaviour
#+begin_src emacs-lisp
;; Allow for shorter "y" or "n" responses.
(defalias 'yes-or-no-p 'y-or-n-p)

;; Allow nested minibuffers.
(setq enable-recursive-minibuffers t)

;; Keep the cursor out of the read-only portions of the minibuffer.
(setq minibuffer-prompt-properties
      '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; No beeping or blinking on errors.
(setq ring-bell-function 'ignore)
(setq visible-bell nil)

;; Disable the obsolete practice of end-of-line spacing from the typewriter era.
(setq sentence-end-double-space nil)

;; According to POSIX, a line should end with a newline.
(setq require-final-newline t)

;; Move point to top/bottom of buffer before signaling a scrolling error.
(setq scroll-error-top-bottom t)

;; If `scroll-conservatively' is set above 100, the window is never
;; automatically recentered.
(setq scroll-conservatively 101)

;; Number of lines of margin at the top and bottom of a window.
(setq scroll-margin 0)

;; Prefer vertical splits over horizontal ones.
(setq split-width-threshold 170
      split-height-threshold nil)

;; Uniquify buffer names by adding a directory prefix.
(setq uniquify-buffer-name-style 'forward)

;; Delete files by moving them to the system trash.
(setq delete-by-moving-to-trash t)

;; Disable automatic backups and lockfiles.
(setq make-backup-files nil
      create-lockfiles nil)

;; Auto-revert buffers when the underlying file changes.
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
(setq revert-without-query '(".")) ; Do not prompt for revert.

;; Ask the user whether to terminate async compilations on exit.
(setq native-comp-async-query-on-exit t)

;; Skip confirmation prompts when creating a new file or buffer
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

** Editing and Indentation
#+begin_src emacs-lisp
;; Set default indentation.
(setq-default indent-tabs-mode nil
              tab-width 2
              fill-column 80)

;; Enable multi-line commenting.
(setq comment-multi-line t)
(setq comment-empty-lines t)

;; Continue wrapped lines at whitespace.
(setq-default word-wrap t)
;; But truncate lines by default for performance. (visual-line-mode will override this)
(setq-default truncate-lines t)

;; Improve `show-paren-mode` behavior.
(setq show-paren-delay 0.1
      show-paren-when-point-inside-paren t)
(setq blink-matching-paren nil) ; Don't blink, it's distracting.

;; Delete selected text when typing.
(delete-selection-mode 1)
#+end_src

** Setup User
#+begin_src emacs-lisp
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")
#+end_src

** Source Scripts
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'reload-config)
;;(require 'buffer-move)
;; (require 'garbage-collect)
;; (require 'update-packages)
#+end_src

** Frame Title Formatting
#+begin_src emacs-lisp
(setq-default
 frame-title-format
 '(:eval (format "[%%b%s] - %s"
           (if (buffer-modified-p)
                      " •"
             "")
           system-name)))
#+end_src

** Session Management
#+begin_src emacs-lisp
;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(use-package autorevert
  :ensure nil
  :commands (auto-revert-mode global-auto-revert-mode)
  :hook
  (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-remote-files nil)
  (auto-revert-use-notify t)
  (auto-revert-avoid-polling nil)
  (auto-revert-verbose t))

;; Recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(use-package recentf
  :ensure nil
  :commands (recentf-mode recentf-cleanup)
  :hook
  (after-init . recentf-mode)

  :custom
  (recentf-auto-cleanup (if (daemonp) 300 'never))
  (recentf-exclude
   (list "^/\\(?:ssh\\|su\\|sudo\\)?:" ; From minimal-emacs.d
          "\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
          "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
          "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
          "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"))

  :config
  ;; A cleanup depth of -90 ensures that `recentf-cleanup' runs before
  ;; `recentf-save-list', allowing stale entries to be removed before the list
  ;; is saved by `recentf-save-list', which is automatically added to
  ;; `kill-emacs-hook' by `recentf-mode'.
  (add-hook 'kill-emacs-hook #'recentf-cleanup -90))

;; savehist is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(use-package savehist
  :ensure nil
  :commands (savehist-mode savehist-save)
  :hook
  (after-init . savehist-mode)
  :custom
  (savehist-autosave-interval 600)
  (savehist-additional-variables
   '(kill-ring                        ; clipboard
     register-alist                   ; macros
     mark-ring global-mark-ring       ; marks
     search-ring regexp-search-ring)))

;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(use-package saveplace
  :ensure nil
  :commands (save-place-mode save-place-local-mode)
  :hook
  (after-init . save-place-mode)
  :custom
  (save-place-limit 400))

;; Enable `auto-save-mode' to prevent data loss. Use `recover-file' or
;; `recover-session' to restore unsaved changes.
(setq auto-save-default t)

(setq auto-save-interval 300)
(setq auto-save-timeout 30)

;; When auto-save-visited-mode is enabled, Emacs will auto-save file-visiting
;; buffers after a certain amount of idle time if the user forgets to save it
;; with save-buffer or C-x s for example.
;;
;; This is different from auto-save-mode: auto-save-mode periodically saves
;; all modified buffers, creating backup files, including those not associated
;; with a file, while auto-save-visited-mode only saves file-visiting buffers
;; after a period of idle time, directly saving to the file itself without
;; creating backup files.
(setq auto-save-visited-interval 5)   ; Save after 5 seconds if inactivity
(auto-save-visited-mode 1)     
#+end_src

* General Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general
  :after evil
  :config
  (general-create-definer ar/global-leader
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  
  (ar/global-leader
    ;; Core
    "SPC" '(execute-extended-command :wk "M-x")
    "q q" '(save-buffers-kill-terminal :wk "Quit Emacs")
    "q r" '(ar/reload-config :wk "Reload Config")))
#+end_src

* UI & Theming
** Fonts
#+begin_src emacs-lisp
(defun ar/set-font-faces ()
  "Set all font faces for the current frame."
  ;; Set default, fixed-pitch, and variable-pitch faces to JetBrainsMono Nerd Font
  ;; Height 145 corresponds to 14.5pt. Adjust as needed.
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  ;; Apply italic slant to comments and keywords for visual distinction
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
  (set-language-environment "UTF-8")
  (set-fontset-font t 'unicode "JetBrainsMono Nerd Font" nil 'append)
  (set-fontset-font t 'symbol "JetBrainsMono Nerd Font" nil 'append))


(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame) (with-selected-frame frame (ar/set-font-faces))))
  (ar/set-font-faces))

(setq font-lock-maximum-decoration t)
#+end_src

** Line Numbers 
#+begin_src emacs-lisp
;; probably redundant
;;(global-display-line-numbers-mode -1)
;; Enable line numbers for some modes
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode t))))
#+end_src

** 📥 TODO Theming
*Use distinct different colors for bold, italic and underline texts*
#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  (doom-themes-treemacs-theme "doom-tokyo-night")
  :config
  (load-theme 'doom-tokyo-night t)

  
  ;; Set distinct colors for bold and italic
  (custom-set-faces
   '(bold ((t (:foreground "#7aa2f7" :weight bold))))
   '(italic ((t (:foreground "#bb9af7" :slant italic))))))
#+end_src

#+begin_src emacs-lisp
;; (use-package catppuccin-theme
;;   :demand t  ; Automatically installs the theme if it's not already present
;;   :config
;;   ;; Set the theme variant to 'macchiato' before loading
;;   (setq catppuccin-flavor 'macchiato)
;;   (load-theme 'catppuccin t))
#+end_src

** Solaire Mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :config
  (solaire-global-mode)
  ;; Differentiate popups from "real" buffers
  (add-hook 'completion-list-mode-hook #'solaire-mode)
  (add-hook 'which-key-mode-hook #'solaire-mode)
  (add-hook 'help-mode-hook #'solaire-mode)
  (add-hook 'info-mode-hook #'solaire-mode)
  (add-hook 'org-src-mode-hook #'solaire-mode)
  (advice-add 'vertico--display-candidates :after
              (lambda (&rest _)
                (when (minibufferp)
                  (with-selected-window (minibuffer-window) (solaire-mode +1))))))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :defer t
  :custom
  (nerd-icons-font-family "JetBrainsMono Nerd Font")
  (nerd-icons-color-icons t))
#+end_src

** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  ;; Set the icons and other aesthetic features
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-enable-word-count t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-modal-icon t)
  (doom-modeline-lsp-icon t)
  :config
  ;; Set the left and right segments of the modeline
  (setq doom-modeline-segments-left
        '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position parrot selection-info))
  (setq doom-modeline-segments-right
        '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug lsp minor-modes input-method indent-info buffer-encoding major-mode word-count  process vcs checker)))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init (dashboard-setup-startup-hook)
  :custom
  (initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  (dashboard-center-content t)
  (dashboard-items '((recents . 5) (projects . 5) (agenda . 5)))
  (dashboard-startup-banner 'logo)
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :defer t
  :init (which-key-mode 1)
  :custom
  (which-key-idle-delay 0.1)
  (which-key-separator " → ")
  (which-key-popup-type 'minibuffer))
#+end_src

** Hide Modeline

#+begin_src emacs-lisp
#+end_src

* Evil (Vim Emulation)
** Core Evil
#+begin_src emacs-lisp
  ;; Uncomment the following if you are using undo-fu
  ;;(setq evil-undo-system 'undo-fu)

  ;; Vim emulation
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
 
    :custom
    (evil-ex-visual-char-range t)
    (evil-ex-search-vim-style-regexp t)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    (evil-echo-state nil)
    (evil-move-cursor-back nil)
    (evil-v$-excludes-newline t)
    (evil-want-C-h-delete t)
    (evil-want-C-u-delete t)
    (evil-want-fine-undo t)
    (evil-move-beyond-eol t)
    (evil-search-wrap nil)
    (evil-want-Y-yank-to-eol t))
#+end_src

** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :init
  ;; It has to be defined before evil-colllection
  (setq evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))
#+end_src

** Evil Extensions
#+begin_src emacs-lisp
(use-package evil-surround :hook (evil-mode . global-evil-surround-mode))
(use-package evil-nerd-commenter :after evil)

(use-package evil-numbers :after evil)
(use-package evil-args :after evil)
(use-package evil-anzu :after evil)
(use-package evil-exchange :after evil :config (evil-exchange-install))
(use-package evil-indent-plus :after evil :config (evil-indent-plus-default-bindings))
(use-package evil-visualstar :hook (evil-mode . global-evil-visualstar-mode))
(use-package evil-matchit :hook (evil-mode . global-evil-matchit-mode))
(use-package evil-snipe :after evil :config (evil-snipe-mode 1) (evil-snipe-override-mode 1))

(use-package evil-lion
  :after evil
  :hook (prog-mode . evil-lion-mode))

(use-package evil-multiedit :after evil :config (evil-multiedit-default-keybinds))
(use-package evil-goggles :hook (evil-mode . evil-goggles-mode) :custom (evil-goggles-duration 0.1))

(use-package evil-escape
  :hook (evil-mode . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.2)
  (evil-escape-excluded-modes '(dired-mode)))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (evil-define-key '(normal visual) 'global "gc" 'evilnc-comment-or-uncomment-lines))
#+end_src

* Editor Behaviour
** Lines Behaviour
#+begin_src emacs-lisp
;; Highlight the current line
(global-hl-line-mode 1)
;; Use visual line mode for soft wrapping instead of truncating lines
(global-visual-line-mode 1)
#+end_src

** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :after evil
  :hook ((prog-mode . smartparens-mode)
         (text-mode . smartparens-mode)
         (markdown-mode . smartparens-mode)
         (org-mode . smartparens-mode))
  :config
  ;;  (smartparens-global-strict-mode 1)
  ;; --- Doom Emacs-style Keybindings ---

 (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map ">" 'sp-slurp-sexp)
    (define-key evil-normal-state-map "<" 'sp-barf-sexp)
    ;; Also bind in visual mode for consistency when selecting a region.
    (define-key evil-visual-state-map ">" 'sp-slurp-sexp)
    (define-key evil-visual-state-map "<" 'sp-barf-sexp))

  ;; --- UI and Behavior Customizations ---
  (setq sp-show-pair-delay 0.1
        sp-show-pair-from-inside t))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :hook ((text-mode . rainbow-delimiters-mode)
         (prog-mode . rainbow-delimiters-mode)
         (org-src-mode-hook . rainbow-delimiters-mode))

  ;; Custom faces updated for the Tokyonight color palette.
  :custom-face
  (rainbow-delimiters-depth-1-face ((t (:foreground "#7aa2f7"))))  ; Blue
  (rainbow-delimiters-depth-2-face ((t (:foreground "#bb9af7"))))  ; Magenta
  (rainbow-delimiters-depth-3-face ((t (:foreground "#e0af68"))))  ; Yellow
  (rainbow-delimiters-depth-4-face ((t (:foreground "#73daca"))))  ; Cyan
  (rainbow-delimiters-depth-5-face ((t (:foreground "#f7768e"))))  ; Red
  (rainbow-delimiters-depth-6-face ((t (:foreground "#9ece6a"))))  ; Green
  (rainbow-delimiters-depth-7-face ((t (:foreground "#ff9e64"))))  ; Orange
  (rainbow-delimiters-depth-8-face ((t (:foreground "#c0caf5"))))  ; Foreground
  (rainbow-delimiters-depth-9-face ((t (:foreground "#a9b1d6"))))) ; Sub-Foreground
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :defer t
  :hook ((prog-mode . rainbow-mode)
         (org-mode . rainbow-mode)))
#+end_src

** Scrolling
Preferring minimal-emacs.d setup over ultra-scroll
#+begin_src emacs-lisp
(use-package ultra-scroll
  :init
  (setq scroll-conservatively 3 ; or whatever value you prefer, since v0.4
        scroll-margin 0)        
  :config
  (ultra-scroll-mode 1))
#+end_src

** Undo System
#+begin_src emacs-lisp
;; The undo-fu package is a lightweight wrapper around Emacs' built-in undo
;; system, providing more convenient undo/redo functionality.
(use-package undo-fu
  :commands (undo-fu-only-undo
             undo-fu-only-redo
             undo-fu-only-redo-all
             undo-fu-disable-checkpoint)
  :config
  (global-unset-key (kbd "C-z"))
  (global-set-key (kbd "C-z") 'undo-fu-only-undo)
  (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))

;; The undo-fu-session package complements undo-fu by enabling the saving
;; and restoration of undo history across Emacs sessions, even after restarting.
(use-package undo-fu-session
  :commands undo-fu-session-global-mode
  :hook (after-init . undo-fu-session-global-mode))
#+end_src

** Buffer Terminator
#+begin_src emacs-lisp
(use-package buffer-terminator
  :custom
  ;; Enable/Disable verbose mode to log buffer cleanup events
  (buffer-terminator-verbose nil)

  ;; Set the inactivity timeout (in seconds) after which buffers are considered
  ;; inactive (default is 30 minutes):
  (buffer-terminator-inactivity-timeout (* 30 60)) ; 30 minutes

  ;; Define how frequently the cleanup process should run (default is every 10
  ;; minutes):
  (buffer-terminator-interval (* 10 60)) ; 10 minutes

  :config
  (buffer-terminator-mode 1))
#+end_src

** Inhibit Mouse
#+begin_src emacs-lisp
(use-package inhibit-mouse
  :config
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'inhibit-mouse-mode)
    (inhibit-mouse-mode 1)))
#+end_src

** Shackle for Popup Window Management
This provides a declarative way to control where and how special-purpose buffers
appear, ensuring a consistent and predictable windowing layout.
#+begin_src emacs-lisp
(use-package shackle
  :init (shackle-mode)
  :custom
  (shackle-rules
   '(;; FIX: Add this rule at the beginning to prevent Shackle from managing Treemacs.
     ;; This allows Treemacs to use its own logic for side-window placement.
     ("^\\*treemacs.*\\*$" :ignore t)
     ;; Rule for Help buffers
     ("\\`\\*Help" :align bottom :size 0.3)
     ;; Rule for compilation/grep/etc.
     ("^\\*.*compilation.*\\*$" :align bottom :size 0.3)
     ("^\\*grep.*\\*$" :align bottom :size 0.3)
     ;; Rule for Embark
     ("\\`\\*Embark Collect" :align bottom :size 0.25)
     ;; Rules for the debugger (dape)
     ("\\`\\*dap-repl" :align right :size 0.4)
     ("\\`\\*dap-locals" :align right :size 0.4)
     ("\\`\\*dap-breakpoints" :align right :size 0.4)
     ("\\`\\*dap-sessions" :align right :size 0.4))
   shackle-inhibit-window-quit-on-same-buffer t))
#+end_src

** Combobulate
#+begin_src emacs-lisp
(use-package combobulate
   :custom
   ;; You can customize Combobulate's key prefix here.
   ;; Note that you may have to restart Emacs for this to take effect!
   (combobulate-key-prefix "C-c o")
   :hook ((prog-mode . combobulate-mode))
   ;; Amend this to the directory where you keep Combobulate's source
   ;; code.
   :load-path ("~/.config/emacs/lisp/combobulate"))
#+end_src
** Window Numbering with *winum*
Provides easy window selection using M-<number>.
#+begin_src emacs-lisp
(use-package winum
  :config
  (winum-mode))
#+end_src

* Completion Framework
*Match the completion framework with my other configurations*
** Orderless for Advanced Filtering
#+begin_src emacs-lisp
(use-package orderless
  :custom
  ;; Use orderless as the primary completion style.
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  ;; Use standard completion for file paths for a more predictable experience.
  (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-category-overrides '((file (styles basic partial-completion))))
  ;; Add dispatchers for more precise filtering (e.g., =literal, %regexp)
  (orderless-dispatchers
   '(orderless-consult-dispatch orderless-affix-dispatch)))
#+end_src

** Vertico: The Vertical Completion UI
#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode)
  :custom
  (vertico-resize nil)
  (vertico-cycle t)
  (vertico-count 10))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :init (marginalia-mode))
#+end_src

** Nerd Icons Completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :demand t
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
  (nerd-icons-completion-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Tell Consult how to find the root of a project. We use the built-in
  ;; `project.el` functionality.
  ;;(setq consult-project-function #'project-roots)
  ;; Keep the preview advice from the original configuration
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)
  (setq consult-prompt-margin 0)
  (setq consult-preview-key 'any)

  :custom
  (consult-narrow-key "<")
  (consult-find-args "fd --hidden --strip-cwd --type f --color=never --follow --exclude .git")
  (consult-ripgrep-args "rg --null --line-buffered --color=never --smart-case --no-heading --line-number --hidden --glob '!.git/'")
  ;; Augment the default consult-buffer sources to include recent files and
  ;; project-specific recent files for a more powerful buffer switcher.
  (consult-buffer-sources
   '(;;consult--source-buffer
     consult--source-recent-file
     consult--source-project-recent-file
     consult--source-bookmark))

  :config
  ;; Configure preview keys for various commands.
  ;; A delayed preview is used to avoid performance issues.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.05 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.1 any)))
#+end_src

** Embark
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (define-key embark-collect-mode-map (kbd "e") #'embark-export)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

** Embark Consult
#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** 📥 TODO Corfu: The Core UI
*Use different accents for corfu completion and their documentation*
#+begin_src emacs-lisp
(defun corfu-precondition-evil ()
  "Precondition for Corfu to activate only in insert state when evil-mode is active."
  (or (not evil-mode) (evil-insert-state-p)))

(use-package corfu
  :init
  (global-corfu-mode)
  ;; Enable Corfu's extensions
  (corfu-popupinfo-mode)
  (corfu-history-mode)
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-resize nil)
  (corfu-auto-delay 0.06)
  (corfu-quit-at-boundary 'separator)
  (corfu-quit-no-match 'separator)
  ;; Configure popupinfo delay
  ;; TODO: show documentation on key input
  (corfu-popupinfo-delay '(0.5 . 0.06))
  ;; This line is now in the correct location
  (corfu-auto-preconditions '(corfu-precondition-evil))
  :config
  ;; Persist history
  (with-eval-after-load 'savehist
  (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src

** Nerd Icons for Corfu
#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :after (corfu nerd-icons)
  :config (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape: Completion Backends
#+begin_src emacs-lisp
(use-package cape
  :commands (cape-dabbrev cape-file cape-keyword)
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  :config
  ;; Silence the noisy pcomplete capf
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent))
#+end_src

** Dabbrev
#+begin_src emacs-lisp
(use-package dabbrev
  :ensure nil
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  :config
  (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
  ;; Available since Emacs 29 (Use `dabbrev-ignored-buffer-regexps' on older Emacs)
  (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

* Org Mode
** Directory Structure
#+begin_src emacs-lisp
(defvar my/org-directory "~/org/"
  "Base directory for all org files.")

(defvar my/org-roam-directory (expand-file-name "roam/" my/org-directory)
  "Directory for org-roam files.")

(defvar my/org-downloads-directory (expand-file-name "downloads/" my/org-directory)
  "Directory for org-download files.")

(defvar my/org-noter-directory (expand-file-name "noter/" my/org-directory)
  "Directory for org-noter files.")

(defvar my/org-archive-directory (expand-file-name "archive/" my/org-directory)
  "Directory for archived org files.")

;; Create necessary directories, including subdirectories for Org Roam templates
(dolist (dir (list my/org-directory
                   my/org-roam-directory
                   my/org-downloads-directory
                   my/org-noter-directory
                   my/org-archive-directory
                   (expand-file-name "projects/" my/org-roam-directory)
                   (expand-file-name "literature/" my/org-roam-directory)
                   (expand-file-name "ideas/" my/org-roam-directory)
                   (expand-file-name "zettel/" my/org-roam-directory)
                   (expand-file-name "attachments/" my/org-directory)
                   (expand-file-name "reviews/" my/org-directory)
                   (expand-file-name "backups/" my/org-directory)))
  (unless (file-directory-p dir)
    (make-directory dir t)))

;; Helper function to find project files for the dynamic capture template.
(defun ar/find-org-projects ()
  "Return a list of all Org files with a \"project\" tag for capture."
  (let ((project-files ()))
    (dolist (file (directory-files-recursively "~/org/" "\\.org$"))
      (with-temp-buffer
        (insert-file-contents file)
        (when (re-search-forward "^#\\+filetags:.*:project:.*" nil t)
          (add-to-list 'project-files (list (file-name-nondirectory file) file)))))
    project-files))
#+end_src

** Better Font Faces
#+begin_src emacs-lisp
(defun ar/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.13)
                  (org-level-3 . 1.10)
                  (org-level-4 . 1.07)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.03)
                  (org-level-7 . 1.02)
                  (org-level-8 . 1)))
    (set-face-attribute (car face) nil :font "JetBrainsMono Nerd Font" :weight 'bold :height (cdr face))))
#+end_src

** Core Configuration
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook
  ;; Hooks for org-mode itself.
  ((org-mode . org-indent-mode)
   (org-mode . visual-line-mode)
   (org-mode . auto-fill-mode)
   (org-mode . ar/org-font-setup)
   (org-mode . (lambda ()
                 "Set evil-mode TAB behavior and other buffer-local settings for Org."
                 (setq-local electric-indent-local-mode nil)
                 (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)))

   ;; Hooks for specialized Org buffers to provide a focused, distraction-free UI.
   (org-agenda-mode . (lambda ()
                        "Configure display for Org Agenda."
                        (visual-line-mode -1)
                        (toggle-truncate-lines 1)
                        (display-line-numbers-mode 0)
                        (setq mode-line-format nil) ; Hide modeline in agenda
                        (setq header-line-format nil)))
   (org-capture-mode . (lambda ()
                         "Hide modeline in capture buffers."
                         (setq mode-line-format nil)
                         (setq header-line-format nil))))

  :custom
  (org-directory my/org-directory)
  ;; Speed up agenda generation by specifying files.
  (org-agenda-files '("~/org/inbox.org"
                      "~/org/projects.org"
                      "~/org/habits.org"
                      "~/org/goals.org"))
  (org-default-notes-file (expand-file-name "inbox.org" my/org-directory))
  ;;(org-use-property-inheritance t) ; Allow property inheritance
  (org-log-done 'time) ; Log time when tasks are marked DONE
  (org-log-into-drawer t)
  (org-return-follows-link t) ; RET follows links
  (org-src-fontify-natively t) ; Better fontification for source blocks
  (org-pretty-entities t)  ; Display LaTeX-like entities
  (org-ellipsis " ⤵")  ; Custom ellipsis for folded headings
  (org-cycle-separator-lines 2) ; Two blank lines between headings when cycling
  (org-startup-indented t) ; Start Org buffers indented
  (org-startup-folded 'content) ; Fold content by default
  (org-hide-leading-stars t) ; Hide leading stars for a cleaner look
  (org-confirm-babel-evaluate nil) ; Do not ask for confirmation to run code blocks
  (org-hide-emphasis-markers t) ; Hide the *, /, _, etc. emphasis markers
  (org-src-tab-acts-natively t)  ; TAB in source blocks acts like it would in that language's mode
  (org-src-preserve-indentation t) ; Preserve indentation in source blocks
  (org-startup-with-inline-images t) ; Show images inline by default
  (org-image-actual-width 600) ;  adjust them to an appropriate size
  (org-tag-alist '(("@work"      . ?w)
                   ("@home"      . ?h)
                   ("@computer"  . ?c)
                   ("@errands"   . ?e)
                   ("read"       . ?r)
                   ("meeting"    . ?m)
                   ("urgent"     . ?u)
                   ("someday"    . ?s)))
  
  (org-todo-keywords
   '((sequence "📥 TODO(t)" "⚡ NEXT(n)" "⚙️ PROG(p)" "⏳ WAIT(w@/!)" "|" "✅ DONE(d!)" "❌ CANCEL(c@)")
     (sequence "📝 PLAN(P)" "🚀 ACTIVE(A)" "⏸️ PAUSED(x)" "|" "🏆 ACHIEVED(a)" "🗑️ DROPPED(D)")))
  (org-todo-keyword-faces
   '(("📥 TODO"      . (:foreground "#f7768e" :weight bold))      ; Red
     ("⚡ NEXT"      . (:foreground "#ff9e64" :weight bold))      ; Orange
     ("⚙️ PROG"      . (:foreground "#7aa2f7" :weight bold))      ; Blue
     ("⏳ WAIT"      . (:foreground "#e0af68" :weight bold))      ; Yellow
     ("✅ DONE"      . (:foreground "#9ece6a" :weight bold))      ; Green
     ("❌ CANCEL"    . (:foreground "#565f89" :weight bold))      ; Comment Grey
     ("📝 PLAN"      . (:foreground "#73daca" :weight bold))      ; Cyan
     ("🚀 ACTIVE"    . (:foreground "#bb9af7" :weight bold))      ; Magenta
     ("⏸️ PAUSED"    . (:foreground "#c0caf5" :weight bold))      ; Foreground
     ("🏆 ACHIEVED"  . (:foreground "#9ece6a" :weight bold))      ; Green
     ("🗑️ DROPPED"   . (:foreground "#565f89" :weight bold)))))  ; Comment Grey
#+end_src

** Babel & Structure Templates
Configure code block execution and create handy shortcuts for inserting common structures.
#+begin_src emacs-lisp
;; (with-eval-after-load 'org
;;   (org-babel-do-load-languages
;;    'org-babel-load-languages
;;    '((emacs-lisp . t)
;;      (python . t)))
;; 
;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))
;; 
;; (with-eval-after-load 'org
;;   (require 'org-tempo)
;;   (add-to-list 'org-structure-template-alist '("jpy" . "src jupyter-python"))
;;   (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
;;   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
;;   (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; Load common languages for Babel.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)))

  ;; Set default header arguments for all src blocks.
  (setq-default org-babel-default-header-args
                '((:session . "none")
                  (:results . "output replace")
                  (:exports . "code")
                  (:cache . "no")
                  (:noweb . "no")
                  (:hlines . "no")
                  (:tangle . "no")))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Visual Enhancements
This section makes Org mode beautiful and ergonomic, with modern styling and seamless Vim keybindings. The `org-modern` configuration complements the base `org-todo-keyword-faces` for a rich, thematic look.
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  ;; This package provides a cleaner, more modern look for Org buffers.
  (setq org-modern-hide-stars "· "
        org-modern-star '("◉" "○" "◈" "◇" "◆" "▷")
        org-modern-list '((43 . "➤") (45 . "–") (42 . "•"))
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.1
        org-modern-block-name
        '(("src" "»" "«")
          ("example" "»" "«")
          ("quote" "❝" "❞"))

        ;; Style TODO keywords directly in the headline.
        ;; This complements the main `org-todo-keyword-faces`.
        org-modern-todo-faces
        '(("📥 TODO"      . (:foreground "#f7768e" :weight bold))
          ("⚡ NEXT"      . (:foreground "#ff9e64" :weight bold))
          ("⚙️ PROG"      . (:foreground "#7aa2f7" :weight bold))
          ("⏳ WAIT"      . (:foreground "#e0af68" :weight bold))
          ("✅ DONE"      . (:background "#2f3c22" :foreground "#9ece6a" :weight bold))
          ("❌ CANCEL"    . (:strike-through t :foreground "#565f89"))
          ("📝 PLAN"      . (:foreground "#73daca" :weight bold))
          ("🚀 ACTIVE"    . (:foreground "#bb9af7" :weight bold))
          ("⏸️ PAUSED"    . (:foreground "#c0caf5" :weight bold))
          ("🏆 ACHIEVED"  . (:background "#364a5c" :foreground "#9ece6a" :weight bold :box t))
          ("🗑️ DROPPED"   . (:strike-through t :foreground "#565f89")))
    
        ;; Style tags with a subtle box, inspired by Doom Emacs.
        org-modern-tag-faces
        `((:foreground ,(face-attribute 'default :foreground) :weight bold :box (:line-width (1 . -1) :color "#3b4261")))
        org-modern-checkbox '((todo . "☐") (done . "☑") (cancel . "☒") (priority . "⚑") (on . "◉") (off . "○"))))

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t))
#+end_src

** Agenda: The Command Center
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org
  :custom
  (org-agenda-window-setup 'current-window)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-span 'week)
  (org-agenda-start-on-weekday nil)
  (org-agenda-start-day "today")
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-include-deadlines t)
  (org-agenda-block-separator ?─)
  (org-agenda-compact-blocks t)
  (org-agenda-start-with-log-mode t)
  (org-agenda-log-mode-items '(closed clock state))
  (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2))
  (org-agenda-time-grid '((daily today require-timed)
                          (800 1000 1200 1400 1600 1800 2000)
                          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (org-agenda-current-time-string "◀── now ─────────────────────────────────────────────────")

  :config
  (setq org-agenda-custom-commands
        '(("d" "📅 Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)
                        (org-agenda-overriding-header "📅 Agenda")))
            (todo "⚡ NEXT" ((org-agenda-overriding-header "⚡ Next Tasks")))
            (tags-todo "project/🚀 ACTIVE" ((org-agenda-overriding-header "🚀 Active Projects")))
            (tags-todo "+PRIORITY=\"A\"" ((org-agenda-overriding-header "🔥 High Priority")))
            (todo "⏳ WAIT" ((org-agenda-overriding-header "⏳ Waiting On")))
            (tags-todo "+habit" ((org-agenda-overriding-header "🔄 Habits")))
            (stuck "" ((org-agenda-overriding-header "🚫 Stuck Projects")))))

          ("n" "⚡ Next Tasks"
           ((todo "⚡ NEXT" ((org-agenda-overriding-header "⚡ Next Tasks")))))

          ("w" "💼 Work Context"
           ((tags-todo "@work/⚡ NEXT" ((org-agenda-overriding-header "💼 Work Next")))
            (tags-todo "@work/📥 TODO" ((org-agenda-overriding-header "💼 Work Tasks")))
            (tags-todo "@work+project/🚀 ACTIVE" ((org-agenda-overriding-header "💼 Work Projects")))))

          ("h" "🏠 Home Context"
           ((tags-todo "@home/⚡ NEXT" ((org-agenda-overriding-header "🏠 Home Next")))
            (tags-todo "@home/📥 TODO" ((org-agenda-overriding-header "🏠 Home Tasks")))))

          ("p" "📋 Projects Overview"
           ((tags "project" ((org-agenda-overriding-header "📋 All Projects")))))

          ("g" "🎯 Goals Review"
           ((tags-todo "goal" ((org-agenda-overriding-header "🎯 Goals")))))

          ("r" "🔍 Review"
           ((agenda "" ((org-agenda-span 'day) (org-agenda-overriding-header "📅 Today")))
            (todo "✅ DONE" ((org-agenda-overriding-header "✅ Completed Today")
                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottoday))))
            (stuck "" ((org-agenda-overriding-header "🚫 Stuck Projects"))))))))

(use-package org-super-agenda
  :after org-agenda
  ;; Use a hook to enable the mode ONLY when an Org Agenda buffer is created.
  :hook (org-agenda-mode . org-super-agenda-mode)
  ;; Use :custom to configure variables. This does not activate the mode.
  :custom
  (org-super-agenda-groups
   '((:name "🔥 Overdue" :deadline past)
     (:name "📅 Today" :time-grid t :scheduled today)
     (:name "⚡ Next" :todo "⚡ NEXT")
     (:name "🔥 Important" :priority "A")
     (:name "📋 Projects" :tag "project")
     (:name "🏠 Home" :tag "@home")
     (:name "💼 Work" :tag "@work")
     (:name "⏳ Waiting" :todo "⏳ WAIT")
     (:name "📚 Reading" :tag "read")
     (:name "🎯 Goals" :tag "goal")
     (:name "🔄 Habits" :tag "habit")
     (:discard (:anything t)))))
#+end_src

** Org Roam: The Knowledge Graph
Org Roam is configured for rapid, Zettelkasten-style note-taking. Templates are minimal and flexible, and the UI is integrated to feel like a natural extension of Emacs.
#+begin_src emacs-lisp
(use-package org-roam
  :defer t
  :after org
  :init
  (setq org-roam-directory my/org-roam-directory)
  (setq org-roam-db-location (expand-file-name "org-roam.db" no-littering-var-directory))
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-node-display-template
   (concat "${title:*} "
           (propertize "${tags:20}" 'face 'org-tag)))
  :config
  (org-roam-db-autosync-mode)

  ;; Configure the backlinks buffer to appear in a right-hand sidebar.
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; Templates for different kinds of notes (Zettelkasten).
  (setq org-roam-capture-templates
      '(("d" "default" plain "* %?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+filetags: \n\n")
         :unnarrowed t)
        ("p" "project" plain "* Goal\n\n%?\n\n* Tasks\n\n* Notes\n\n* Log\n"
         :target (file+head "projects/${slug}.org"
                            "#+title: Project: ${title}\n#+filetags: project\n")
         :unnarrowed t)
        ("l" "literature note" plain "* Source\n  - Author: \n  - Title: \n  - Year: \n\n* Summary\n\n%?\n\n* Key Takeaways\n\n* Quotes\n"
         :target (file+head "literature/${slug}.org"
                            "#+title: ${title}\n#+filetags: literature\n")
         :unnarrowed t)
        ("i" "idea" plain "* %?"
         :target (file+head "ideas/${slug}.org"
                            "#+title: ${title}\n#+filetags: idea fleeting\n")
         :unnarrowed t)
        ("z" "zettel" plain "* %?\n\n* References\n\n"
         :target (file+head "zettel/${slug}.org"
                            "#+title: ${title}\n#+filetags: zettel permanent\n")
         :unnarrowed t)
        ("j" "journal" plain "* Log\n\n%?"
         :target (file+olp+datetree (expand-file-name "journal.org" my/org-roam-directory))
         :unnarrowed t))))

(use-package org-roam-ui
  :after org-roam
  :commands (org-roam-ui-mode org-roam-ui-open)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start nil))

(use-package consult-org-roam
  :after (consult org-roam)
  :init (consult-org-roam-mode 1))
#+end_src

** 📥 TODO Capture: The Gateway to Org
Your central inbox for capturing tasks, notes, and ideas, now featuring the
advanced dynamic project task template.
*Use dynamic directory*
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :custom
  (org-capture-templates
   '(("t" "📥 Task" entry (file+headline "~/org/inbox.org" "Tasks")
      "* 📥 TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n")

     ("n" "📝 Note" entry (file+headline "~/org/inbox.org" "Notes")
      "* %? :note:\n  :PROPERTIES:\n  :CREATED: %U\n  :SOURCE: \n  :END:\n")

     ("j" "📔 Journal" entry (file+olp+datetree "~/org/journal.org")
      "* %U %?\n")

     ("m" "🤝 Meeting" entry (file+headline "~/org/inbox.org" "Meetings")
      "* Meeting: %? :meeting:\n  :PROPERTIES:\n  :CREATED: %U\n  :ATTENDEES: \n  :END:\n** Agenda\n** Notes\n** Action Items\n")

     ("p" "📝 Project" entry (file+headline "~/org/projects.org" "Projects")
      "* 📝 PLAN %? :project:\n  :PROPERTIES:\n  :CREATED: %U\n  :GOAL: \n  :DEADLINE: \n  :END:\n** Goals\n** Tasks\n*** 📥 TODO Define project scope\n** Resources\n** Notes\n")
     ;;New template to add tasks directly to existing projects.
     ("P" "📌 Project Task" entry
      (file (lambda ()
              (let* ((project-list (ar/find-org-projects))
                     (project-name (completing-read "Select Project: " project-list)))
                (cdr (assoc project-name project-list)))))
      "* 📥 TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n"
      :prepend t
      :headline "Tasks")

     ("b" "📚 Book" entry (file+headline "~/org/reading.org" "Reading List")
      "* %? :book:read:\n  :PROPERTIES:\n  :CREATED: %U\n  :AUTHOR: \n  :GENRE: \n  :PAGES: \n  :STARTED: \n  :FINISHED: \n  :RATING: \n  :END:\n** Summary\n** Key Takeaways\n** Quotes\n")

     ("h" "🔄 Habit" entry (file+headline "~/org/habits.org" "Habits")
      "* 📥 TODO %? :habit:\n  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")\n  :PROPERTIES:\n  :CREATED: %U\n  :STYLE: habit\n  :END:\n")

     ("g" "🎯 Goal" entry (file+headline "~/org/goals.org" "Goals")
      "* 🎯 GOAL %? :goal:\n  DEADLINE: %(org-read-date nil nil \"+1y\")\n  :PROPERTIES:\n  :CREATED: %U\n  :TYPE: \n  :END:\n** Why this goal?\n** Success criteria\n** Action steps\n*** 📥 TODO Break down into smaller tasks\n** Resources needed\n** Potential obstacles\n** Progress tracking\n"))))
#+end_src

** Org Habit
#+begin_src emacs-lisp
(use-package org-habit
  :ensure nil
  :after org
  :custom
  (org-habit-graph-column 60)
  (org-habit-show-habits-only-for-today t)
  (org-habit-pregraph-format "  ") ;; Corrected typo
  (org-habit-graph-mature-star "✅")
  (org-habit-graph-fresh-star "👌")
  (org-habit-graph-ready-star "👍")
  (org-habit-graph-early-star "🌱")
  (org-habit-graph-late-star "👎")
  (org-habit-graph-future-star "…"))
#+end_src

** Evil Integration
#+begin_src emacs-lisp
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar todo))))
  (add-to-list 'evil-emacs-state-modes 'org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 ;; Org-mode specific bindings
 "o" '(:ignore t :wk "org")
 "o a" '(org-agenda :wk "agenda")
 "o c" '(org-capture :wk "capture")
 "o s" '(org-schedule :wk "schedule")
 "o d" '(org-deadline :wk "deadline")
 "o t" '(org-set-tags-command :wk "set tags")
 
 ;; Org Jupyter Keybindings
 "o" '(:ignore t :which-key "org")
 "o j" '(:ignore t :which-key "jupyter")
 "o j r" '(jupyter-restart-kernel :wk "restart kernel")
 "o j i" '(jupyter-interrupt-kernel :wk "interrupt kernel")
 "o j c" '(jupyter-connect-to-kernel :wk "connect to kernel")
 "o j l" '(jupyter-list-kernels :wk "list kernels")
 
 ;; Org-roam specific bindings under "org roam"
 "o r" '(:ignore t :wk "roam")
 "o r f" '(org-roam-node-find :wk "find node")
 "o r i" '(org-roam-node-insert :wk "insert node")
 "o r c" '(org-roam-capture :wk "roam capture")
 "o r g" '(org-roam-graph :wk "show graph")
 "o r t" '(org-roam-tag-add :wk "add tag")

 "o n" '(:ignore t :which-key "org noter")
 "o n n" '(ar/org-noter-find-or-create-notes :wk "Open/Create PDF Notes")
 "o n i" '(org-noter-insert-note :wk "Insert Note"))
#+end_src

* Workflow Management
** Dired
This setup enhances the built-in Dired, turning it into a fast, modern, and feature-rich file manager that integrates perfectly with Evil mode and your other packages.
#+begin_src emacs-lisp
(use-package fd-dired
  :defer t
  :config
  (setq fd-dired-use-gnu-find-syntax t))

;; Provides commands to open files with external applications.
(use-package dired-open
  :defer t
  :config
  (setq dired-open-extensions '(("png" . "imv") ("mp4" . "mpv"))))

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  :config
  ;; Enable git gutter information asynchronously.
  (add-hook 'dired-mode-hook 'dired-git-info-mode)

  ;; Define evil-mode keys for a vim-like experience.
  (evil-define-key 'normal dired-mode-map
    ;; Navigation
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file-other-window ; Open in other window is often more useful
    (kbd "j") 'dired-next-line
    (kbd "k") 'dired-previous-line
    (kbd "G") 'dired-goto-file
    (kbd "gg") 'dired-first-line
    (kbd "^") 'dired-goto-root-directory
    (kbd "~") 'dired-home
    (kbd "RET") 'dired-find-file
    (kbd "i") 'dired-maybe-insert-subdir
    ;; Marking
    (kbd "m") 'dired-mark
    (kbd "u") 'dired-unmark
    (kbd "U") 'dired-unmark-all-marks
    (kbd "t") 'dired-toggle-marks
    ;; File Operations
    (kbd "C-n") 'dired-create-file
    (kbd "C-d") 'dired-create-directory
    (kbd "R") 'dired-do-rename
    (kbd "D") 'dired-do-delete
    (kbd "C") 'dired-do-copy
    (kbd "X") 'dired-open-file ; Use dired-open to open externally
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown))

;; dired-x for additional functionality
(use-package dired-x
  :ensure nil
  :after dired
  :custom (dired-x-hands-off-my-keys nil)
  :config
  ;; Define dired-omit-files to prevent void-variable errors
  (setq dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$")
  (setq dired-omit-verbose nil))

;; Asynchronously display git status in Dired. Highly performant.
(use-package dired-git-info
  :defer t
  :commands dired-git-info-mode)

;; Adds Nerd Font icons to Dired.
(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))

;; Allows editing directory listings directly (wdired) with ranger-like keys.
(use-package dired-ranger
  :after dired
  :config
  (define-key dired-mode-map (kbd "y") 'dired-ranger-copy)
  (define-key dired-mode-map (kbd "p") 'dired-ranger-paste)
  (define-key dired-mode-map (kbd "x") 'dired-ranger-move))

(ar/global-leader
 "f" '(:ignore t :wk "file")
 "f f" '(find-file :wk "find file")
 "f e" '(dired (or (buffer-file-name) default-directory) :wk "explore directory")
 "f r" '(consult-recent-file :wk "find recent file"))
#+end_src

** Workspaces
#+begin_src emacs-lisp
(use-package perspective
  :defer t
  :init
  ;; Set the state file location before enabling the mode.
  (setq persp-state-default-file (expand-file-name "perspectives" no-littering-var-directory))
  (setq persp-mode-prefix-key (kbd "C-c p"))
  :custom
  ;; Automatically kill empty perspectives to keep the list clean.
  (persp-auto-kill-on-last-buffer-close t)

  :config
  (persp-mode +1)

  ;; Custom function to automatically create or switch to a project-specific perspective.
  (defun ar/perspective-switch-or-create ()
    "Switch to a perspective named after the current project, creating it if needed."
    (interactive)
    (let ((project-name (projectile-project-name)))
      (unless (string= project-name "-") ; Ignore if not in a project
        (if (get-perspective project-name)
            (persp-switch project-name)
          (persp-add-new project-name)
          (persp-switch project-name)))))

  ;; Hook this function into projectile to run after switching projects.
  (add-hook 'projectile-after-switch-project-hook #'ar/perspective-switch-or-create)

  ;; Load the saved perspectives when Emacs starts.
  (when (file-exists-p persp-state-default-file)
    (persp-load-state-from-file persp-state-default-file)))

;; Define your custom leader keybindings for workspace management.
;; Workspaces related keybindings
(ar/global-leader
 ;; workspace related keybindings
 "w" '(:ignore t :wk "workspaces")
 "w n" '(persp-next :wk "next workspace")
 "w p" '(persp-prev :wk "previous workspace")
 "w s" '(persp-switch :wk "switch workspace")
 "w b" '(persp-switch-to-buffer :wk "switch buffer in workspace")
 "w c" '(persp-add-new :wk "create workspace")
 "w r" '(persp-rename :wk "rename workspace")
 "w k" '(persp-kill :wk "kill workspace"))
#+end_src

** Project Management: Deep *projectile* Integration
#+begin_src emacs-lisp
(use-package projectile
  :defer t
  :custom
  ;; Use the default completion system, which will be powered by Vertico/Consult.
  (projectile-completion-system 'default)
  ;; Define where Projectile should look for your projects.
  (projectile-project-search-path '("~/Code/" "~/Projects/"))
  ;; Enable caching for significant performance improvements.
  (projectile-enable-caching t)
  ;; When switching projects, immediately open a file prompt within that project.
  (projectile-switch-project-action #'projectile-find-file)

  :config
  (projectile-mode +1)
  ;; Do not treat the emacs 'var' directory as a project.
  (add-to-list 'projectile-ignored-projects
               (expand-file-name "var" user-emacs-directory)))
  ;; Define our extensive project-management keybindings under the "p" prefix.

;; A `consult` source specifically for projectile, if not already provided
;; by another package. This provides the `consult-projectile` command.
(use-package consult-projectile
  :after (consult projectile))

(ar/global-leader
 "p" '(:ignore t :wk "project")
 "p p" '(projectile-switch-project :wk "switch project")
 "p f" '(consult-projectile :wk "find file in project")
 "p d" '(projectile-find-dir :wk "find directory in project")
 "p b" '(projectile-switch-to-buffer :wk "find buffer in project")
 "p g" '(consult-ripgrep :wk "grep in project")
 "p s" '(:ignore t :wk "save/kill")
 "p s s" '(projectile-save-project-buffers :wk "save project buffers")
 "p s k" '(projectile-kill-buffers :wk "kill project buffers")
 "p c" '(projectile-compile-project :wk "compile project")
 "p t" '(projectile-run-tests :wk "run project tests")
 "p R" '(projectile-replace :wk "replace in project"))
#+end_src

** Buffer Management: A Project-Aware *ibuffer*
#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :defer t
  :after (ibuffer projectile)
  :config
  ;; This hook automatically creates project-based groups in ibuffer.
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-projectile-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'project-file-relative)
                (ibuffer-do-sort-by-project-file-relative)))))

;; Integrate nerd-icons for a more modern look, similar to Doom's setup.
(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(ar/global-leader
  ;; Buffer management
  "b" '(:ignore t :wk "buffers")
  "b b" '(consult-buffer :wk "switch buffer")
  "b i" '(ibuffer :wk "ibuffer (by project)")
  "b k" '(kill-current-buffer :wk "kill buffer")
  "b n" '(next-buffer :wk "next buffer")
  "b p" '(previous-buffer :wk "previous buffer")
  "b r" '(revert-buffer :wk "revert buffer")
  "b s" '(save-buffer :wk "save buffer"))
#+end_src

* Development Environment
** Language Server Protocol: Eglot & Eglot Booster
Eglot is the built-in LSP client. It will automatically use the correct
language server from the PATH set by your direnv-managed environment. Boost
Eglot performance using eglot booster
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :hook ((prog-mode . eglot-ensure)
         ;; Explicitly hook into org-src-mode for LSP in code blocks.
         (org-src-mode . eglot-ensure))
  :custom
  (eglot-autoshutdown t)
  :config
  ;; Associate python-ts-mode with pyright for best-in-class Python support.
  (add-to-list 'eglot-server-programs '(python-ts-mode . ("pyright-langserver" "--stdio"))))

(use-package eglot-booster
  :vc (:url "https://github.com/jdtsmith/eglot-booster" :branch main)
  :after eglot
  :config
  (eglot-booster-mode))
#+end_src

** Consult Integration
#+begin_src emacs-lisp
;; Configure xref to use the powerful UI provided by the main consult package.
;; This is the most robust way to ensure consult is loaded first.
(with-eval-after-load 'consult
  (setq xref-show-definitions-function #'consult-xref-show-definitions)
  (setq xref-show-references-function #'consult-xref-show-references))

;; Provides a powerful consult interface for Eglot's LSP features.
(use-package consult-eglot
  :after (consult eglot))

;; Integrates consult-eglot sources with Embark actions.
(use-package consult-eglot-embark
  :after (consult-eglot embark))
#+end_src

** Eldoc Box
Display eldoc documentation in a popup frame at point.
#+begin_src emacs-lisp
(use-package eldoc-box
  :hook (eldoc-mode . eldoc-box-hover-mode)
  :custom
  ;; Only show the popup if there is actual documentation.
  (eldoc-box-show-if-no-doc nil)
  ;; Disable the default minibuffer display since we have a popup.
  (eldoc-echo-area-display-truncation-p nil)
  :custom-face
  ;; Style the popup to match the doom-tokyo-night theme.
  (eldoc-box-border ((t (:foreground "#3b4261"))))
  (eldoc-highlight-symbol-face ((t (:foreground "#7aa2f7" :weight bold)))))
#+end_src

** Robust Debugger UI
We use *dape* for debugging. The UI for debugger windows is cleanly managed by the enhanced *shackle* configuration in my *Editor Behaviour* section.
#+begin_src emacs-lisp
(use-package dape
  :defer t
  :commands (dape dape-debug-recent)
  :hook
  ;; Use GUD's tooltip mode for mouse-hover variable inspection.
  (dape-session-mode-hook . gud-tooltip-mode)
  :config
  ;; Set the breakpoint file location to be inside the var directory.
  (setq dape-breakpoint-file (expand-file-name "dape-breakpoints" no-littering-var-directory))

  ;; Persist breakpoints across Emacs sessions.
  (add-hook 'kill-emacs-hook #'dape-breakpoint-save)
  (add-hook 'after-init-hook #'dape-breakpoint-load))

(ar/global-leader
 ;; Debugging Keybindings (DAPE)
 "d" '(:ignore t :wk "debug (dape)")
 "d b" '(dape-toggle-breakpoint-at-point :wk "breakpoint")
 "d c" '(dape-continue :wk "continue")
 "d n" '(dape-next :wk "next")
 "d i" '(dape-step-in :wk "step in")
 "d o" '(dape-step-out :wk "step out")
 "d q" '(dape-disconnect :wk "quit")
 "d r" '(dape-debug-recent :wk "debug recent")
 "d e" '(dape :wk "debug new")
 "d B" '(ar/dape-debug-org-src-block :wk "debug org block"))
#+end_src

** Syntax Checking
This setup uses the built-in *flymake* for live diagnostics, enhanced by *flymake-collection* for easy linter integration, and *apheleia* for automatic, on-save formatting.
#+begin_src emacs-lisp
;; Use the built-in flymake for syntax checking.
(use-package flymake
  :ensure nil
  :hook (prog-mode . flymake-mode)
  :custom
  (flymake-check-syntax-automatically '(save mode-enabled idle-change))
  (flymake-idle-change-delay 0.4))

;; A much cleaner way to add support for checkers like pylint and flake8.
(use-package flymake-collection
  :after flymake
  :config
  (flymake-collection-hook-setup))

;; Install from github
;; Display flymake errors in a popup frame instead of the echo area.
(use-package flymake-posframe
  :load-path ("~/.config/emacs/lisp/flymake-posframe")
  :after flymake
  :hook (flymake-mode . flymake-posframe-mode))
#+end_src

** Formatting
#+begin_src emacs-lisp
(use-package apheleia
  :defer t
  :init (apheleia-global-mode +1))
#+end_src

** Tree-sitter for syntax highlighting
#+begin_src emacs-lisp
(use-package treesit-auto
  :when (treesit-available-p)
  :config
  (setq treesit-auto-langs '(bash c cpp css python markdown toml yaml))
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package treesit-fold
  :hook (treesit-auto-mode-hook . treesit-fold-mode))

(use-package evil-textobj-tree-sitter
  :after evil
  :config
  ;; Goto start of next function
  (define-key evil-normal-state-map
              (kbd "]f")
              (lambda ()
                (interactive)
                (evil-textobj-tree-sitter-goto-textobj "function.outer")))
  
  ;; Goto start of previous function
  (define-key evil-normal-state-map
              (kbd "[f")
              (lambda ()
                (interactive)
                (evil-textobj-tree-sitter-goto-textobj "function.outer" t)))
  
  ;; Goto end of next function
  (define-key evil-normal-state-map
              (kbd "]F")
              (lambda ()
                (interactive)
                (evil-textobj-tree-sitter-goto-textobj "function.outer" nil t)))
  
  ;; Goto end of previous function
  (define-key evil-normal-state-map
              (kbd "[F")
            (lambda ()
              (interactive)
              (evil-textobj-tree-sitter-goto-textobj "function.outer" t t))))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 "l" '(:ignore t :which-key "lsp (eglot)")
 "l a" '(eglot-code-actions :wk "code actions")
 "l d" '(xref-find-definitions :wk "go to definition")
 "l D" '(xref-find-declarations :wk "go to declaration")
 "l i" '(xref-find-implementations :wk "go to implementation")
 "l r" '(xref-find-references :wk "find references")
 "l s" '(consult-imenu :wk "buffer symbols")
 "l S" '(consult-eglot-symbols :wk "project symbols")
 "l R" '(eglot-rename :wk "rename")
 "l f" '(apheleia-format-buffer :wk "format buffer")
 "l e" '(consult-flymake :wk "buffer errors")
 "l E" '(consult-eglot-diagnostics :wk "project errors")
 "l h" '(:ignore t :which-key "help")
 "l h h" '(eldoc-doc-buffer :wk "show full documentation"))
#+end_src

* Python & Jupyter for Org Mode
#+begin_src emacs-lisp
(use-package zmq :defer t)
;; Provides Jupyter integration for Emacs.
(use-package jupyter
  :defer t
  :after org
  :hook (org-mode . org-display-inline-images)
  :custom
  (jupyter-channel-build-if-needed t)
  ;; Ensure Jupyter uses the Python from the project's virtual environment.
  (jupyter-python-executable-command (executable-find "python3"))
  ;; Prioritize rich output formats to mimic JupyterLab.
  (ob-jupyter-response-mime-type-priorities
   '("text/html" "image/png" "image/jpeg" "text/plain"))
  (ob-jupyter-startup-timeout 30)
  :config
  ;; Load the jupyter language into babel.
  (org-babel-do-load-languages 'org-babel-load-languages '((jupyter . t)))
  ;; Make python blocks use jupyter by default for a stateful, interactive experience.
  (add-to-list 'org-babel-default-header-args:python
               '((:session . "jupyter-python")
                 (:kernel . "python3")
                 (:results . "output file")
                 (:exports . "results")
                 (:dir . "./.jupyter-exports/"))))

;; --- Debugging Functionality for both .py files and Org blocks ---
(defun ar/dape-debug-org-src-block ()
  "Tangle the current Org src block to a temp file and debug it."
  (interactive)
  (when (derived-mode-p 'org-mode)
    (let* ((tmp-file (make-temp-file "emacs-babel-" nil ".py"))
           (info (org-babel-get-src-block-info 'light)))
      (with-temp-file tmp-file (insert (nth 2 info)))
      (message "Debugging tangled block in %s" tmp-file)
      (dape--debug
       (lambda (template)
         (let ((new-template (copy-tree template)))
           (setf (plist-get new-template :program) tmp-file)
           new-template))
       "Python :: Run Current File (debugpy)"))))

(with-eval-after-load 'dape
  (dape-register-debug-template
   "Python :: Run Current File (debugpy)"
   '(:type "python" :request "launch" :justMyCode t
     :program #'buffer-file-name
     :cwd #'projectile-project-root)))
#+end_src

* Markdown Environment
A production-ready setup for a modern Markdown workflow in Emacs 30. This
configuration provides live rendering, a table of contents, superior code block
highlighting, powerful table editing, linting, and auto-formatting, with
intelligent conflict resolution and a robust loading order.
** Core Markdown Mode with Tree-sitter and Enhancements
This configures `markdown-mode` as the foundation. It is the core component
that all other Markdown packages will depend on.
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . gfm-mode))
  :init
  ;; For Emacs 30+, use treesitter as the default markdown mode.
  (when (treesit-available-p)
    (setq markdown-mode-default-major-mode 'markdown-ts-mode))
  :config
  ;; Fontify code blocks using their native major modes for rich highlighting.
  (setq markdown-fontify-code-blocks-natively t)

  ;; Define keybindings for both standard and Tree-sitter modes,
  ;; ensuring the keymap variables exist before trying to modify them.
  (dolist (m-map '(markdown-mode-map markdown-ts-mode-map))
    (when (boundp m-map)
      (let ((map (symbol-value m-map)))
        (define-key map (kbd "C-c C-b") #'markdown-toggle-bold)
        (define-key map (kbd "C-c C-s") #'markdown-toggle-italic)
        (define-key map (kbd "C-c C-q") [cite_start]#'markdown-toggle-blockquote) [cite: 223]
        (define-key map (kbd "C-c C-l") [cite_start]#'markdown-insert-link) [cite: 223]
        (define-key map (kbd "C-c C-i") [cite_start]#'markdown-insert-image) [cite: 223]
        (define-key map (kbd "C-c t") [cite_start]#'markdown-edit-table) [cite: 223]
        (define-key map (kbd "C-c p") [cite_start]#'markdown-open) [cite: 223]
        (define-key map (kbd "C-c o") #'imenu-list-smart-toggle))))

  ;; Add folding support to both modes.
  (add-hook 'markdown-mode-hook #'treesit-fold-mode)
  (add-hook 'markdown-ts-mode-hook #'treesit-fold-mode))
#+end_src

** Live In-Buffer Rendering with *md-roam*
This package provides "website-like" rendering. It depends on `markdown-mode`.
#+begin_src emacs-lisp
(use-package md-roam
  :vc (:url "https://github.com/nobiot/md-roam" :branch main)
  :after markdown-mode
  :hook ((markdown-mode . md-roam-mode)
         (markdown-ts-mode . md-roam-mode))
  :config
  (with-eval-after-load 'markdown-mode
    (advice-add #'markdown-indent-line :before-until #'completion-at-point))
  
  (defun ar/configure-md-roam-faces ()
    "Set md-roam faces to match theme and resolve font conflicts."
    (setq-local markdown-fontify-code-blocks-natively nil)
    (set-face-attribute 'md-roam-h1-face nil :foreground "#7aa2f7" :height 1.4 :weight 'bold)
    (set-face-attribute 'md-roam-h2-face nil :foreground "#73daca" :height 1.3 :weight 'bold)
    (set-face-attribute 'md-roam-h3-face nil :foreground "#bb9af7" :height 1.2 :weight 'bold)
    (set-face-attribute 'md-roam-h4-face nil :foreground "#e0af68" :height 1.1 :weight 'bold)
    (set-face-attribute 'md-roam-h5-face nil :foreground "#ff9e64" :height 1.0 :weight 'bold)
    (set-face-attribute 'md-roam-h6-face nil :foreground "#c0caf5" :height 1.0 :weight 'bold)
    (set-face-attribute 'md-roam-code-face nil :background "#2f3c22")
    (set-face-attribute 'md-roam-blockquote-face nil :slant 'italic :foreground "#565f89"))
  (add-hook 'md-roam-mode-hook #'ar/configure-md-roam-faces))
#+end_src

** Table of Contents Sidebar with *imenu-list*
Provides a dynamic, clickable table of contents for easy navigation.
#+begin_src emacs-lisp
(use-package imenu-list
  :after markdown-mode
  :custom
  (imenu-list-focus-after-activation t)
  (imenu-list-auto-update t)) ; FIX: This is a variable, not a function.
#+end_src

** Live Linting with *flymake-markdownlint*
Integrates *markdownlint* with Flymake for on-the-fly style checking.
#+begin_src emacs-lisp
(use-package flymake-markdownlint
  :after markdown-mode
  :hook ((markdown-mode . flymake-markdownlint-enable)
         (markdown-ts-mode . flymake-markdownlint-enable)))
#+end_src

** Auto-formatting with Apheleia
This configures *apheleia* to use *prettier* for auto-formatting.
#+begin_src emacs-lisp
(with-eval-after-load 'apheleia
  (setf (alist-get 'gfm-mode apheleia-formatters)
        '("prettier" "--prose-wrap" "always"))
  (setf (alist-get 'markdown-ts-mode apheleia-formatters)
        '("prettier" "--prose-wrap" "always")))
#+end_src

* General Tools
** Helpful
Helpful is an alternative to the built-in Emacs help that provides much more
contextual information.
#+begin_src emacs-lisp
(use-package helpful
  :defer t
  :commands (helpful-callable
             helpful-variable
             helpful-key
             helpful-command
             helpful-at-point
             helpful-function)
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-function] . helpful-callable)
  ([remap describe-key] . helpful-key)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  :custom
  (helpful-max-buffers 7))
#+end_src

** Wgrep: Writable Grep
#+begin_src emacs-lisp
(use-package wgrep
  :defer t
  :commands (wgrep-change-to-wgrep-mode)
  :config
  ;; evil-collection provides bindings like :wq to save and :q! to abort.
  (setq wgrep-auto-save-buffer t))
#+end_src

** Version Control
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-blame)
  :custom
  ;; For a focused view, display the Magit status buffer in its own frame.
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  ;; Automatically save file-visiting buffers before staging changes.
  (magit-save-repository-buffers 'dont-confirm)
  :config
  ;; When quitting Magit, this ensures the previous window configuration is restored.
  ;; The `magit-display-buffer-fullframe-status-v1` function saves the layout
  ;; to the `:magit-fullscreen` register, which we jump back to.
  (defun ar/magit-quit-and-restore-windows ()
    "Kill the Magit buffer and restore the previous window configuration."
    (interactive)
    (kill-buffer (current-buffer))
    (when (get-register :magit-fullscreen)
      (jump-to-register :magit-fullscreen)))

  ;; Bind "q" in the status buffer to our custom quitting function.
  (define-key magit-status-mode-map (kbd "q") #'ar/magit-quit-and-restore-windows))
#+end_src

*** Forge
*forge* provides integration with online Git forges (e.g., GitHub, GitLab).
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

*** Magit Todos
*magit-todos* displays TODO items from your project files in the status buffer.
#+begin_src emacs-lisp
(use-package magit-todos
  :after magit
  :hook (magit-mode . magit-todos-mode))
#+end_src

*** Git Timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :after magit
  :config
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 "g" '(:ignore t :wk "git")
 "g s" '(magit-status :wk "status")
 "g c" '(magit-commit :wk "commit")
 "g C" '(magit-commit-amend :wk "commit amend")
 "g p" '(magit-push-current-to-pushremote :wk "push")
 "g P" '(magit-pull-from-upstream :wk "pull")
 "g b" '(magit-branch :wk "branches")
 "g l" '(magit-log-buffer-file :wk "log current file")
 "g L" '(magit-log-current :wk "log current branch")
 "g d" '(magit-diff-unstaged :wk "diff")
 "g f" '(magit-fetch :wk "fetch")
 "g m" '(magit-merge :wk "merge")
 "g r" '(magit-rebase :wk "rebase"))
#+end_src

** PDF-Tools
*** Core
#+begin_src emacs-lisp
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :hook (pdf-view-mode . pdf-view-midnight-minor-mode)

  ;; Theme customization to match doom-tokyo-night.
  :custom
  ;; Use the specific Tokyonight background and foreground colors for the PDF view.
  (pdf-view-midnight-colors '("#1a1b26" . "#c0caf5"))
  ;; Enable continuous scrolling for a smoother experience.
  (pdf-view-continuous t)

  :custom-face
  ;; Customize other faces to match the Tokyonight aesthetic.
  (pdf-view-highlight-face ((t (:background "#e0af68" :foreground "#1a1b26")))) ; Yellow
  (pdf-view-link-face ((t (:foreground "#7aa2f7"))))      ; Blue
  (pdf-view-active-link-face ((t (:foreground "#bb9af7")))); Magenta

  :config
  ;; Automatically build the server executable if it's missing.
  ;; `pdf-tools-install` is idempotent and will only build if necessary.
  (pdf-tools-install :no-query)

  ;; Ensure Org mode integration is set up after Org itself is loaded.
  (with-eval-after-load 'org
    (add-to-list 'org-open-at-point-functions 'org-pdftools-open-link)
    (setq org-pdftools-link-prefix "pdf")))
#+end_src

*** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :after (org pdf-view)
  :custom
  ;; Store all notes inside the dedicated `noter` directory.
  (org-noter-notes-search-path (list my/org-noter-directory))
  ;; Use a consistent naming scheme for note files.
  (org-noter-notes-file-name "%s.org")
  ;; Automatically create a new heading for each note.
  (org-noter-insert-note-no-questions t)
  ;; Keep the notes window focused after creating a note.
  (org-noter-always-focus-on-notes-buffer t)
  ;; Customize the note heading template.
  (org-noter-heading-application-function 'org-noter-insert-heading-at-point)
  (org-noter-note-heading-template "* %s\n:PROPERTIES:\n:NOTER_PAGE: %p\n:NOTER_LEFT: %l\n:NOTER_RIGHT: %r\n:END:\n\n")

  :config
  ;; Custom function to create a new notes file if one doesn't exist
  ;; or find the existing one and open it side-by-side.
  (defun ar/org-noter-find-or-create-notes ()
    "Find the notes for the current PDF or create a new notes file.
Opens the notes in a split window to the right."
    (interactive)
    (let ((pdf-path (buffer-file-name)))
      (unless pdf-path
        (error "Current buffer is not visiting a file"))
      (let* ((pdf-name (file-name-nondirectory pdf-path))
             (notes-file (expand-file-name (format "%s.org" (file-name-sans-extension pdf-name)) my/org-noter-directory)))
        (if (file-exists-p notes-file)
            (find-file notes-file)
          (progn
            (find-file notes-file)
            (insert (format "#+title: Notes on %s\n\n" pdf-name))))
        (delete-other-windows)
        (split-window-right)
        (windmove-right)
        (find-file pdf-path)))))
#+end_src

* Perform Garbage Collection When Idle
This is a good practice to keep Emacs responsive.
#+begin_src emacs-lisp
(add-hook 'after-focus-change-hook
          (lambda ()
            (unless (frame-focus-state)
              (garbage-collect))))
#+end_src

