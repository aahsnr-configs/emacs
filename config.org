#+TITLE: Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes 

* Core Emacs Configuration
This section incorporates the sensible defaults and settings from the minimal-emacs.d project. This provides a robust and well-optimized foundation.
** Lexical Binding
#+begin_src emacs-lisp
;;; config.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** Elpaca Package Manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))


;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Native Compilation
#+begin_src emacs-lisp
;; Native compilation enhances Emacs performance by converting Elisp code into
;; native machine code, resulting in faster execution and improved
;; responsiveness.
;; testing ;;;
;; Ensure adding the following compile-angel code at the very beginning
;; of your `~/.emacs.d/post-init.el` file, before all other packages.
(use-package compile-angel
  :demand t
  :custom
  ;; Set `compile-angel-verbose` to nil to suppress output from compile-angel.
  ;; Drawback: The minibuffer will not display compile-angel's actions.
  (compile-angel-verbose nil)

  :config
  ;; The following directive prevents compile-angel from compiling your init
  ;; files. If you choose to remove this push to `compile-angel-excluded-files'
  ;; and compile your pre/post-init files, ensure you understand the
  ;; implications and thoroughly test your code. For example, if you're using
  ;; `use-package', you'll need to explicitly add `(require 'use-package)` at
  ;; the top of your init file.
  (push "/init.el" compile-angel-excluded-files)
  (push "/early-init.el" compile-angel-excluded-files)
  (push "/config.el" compile-angel-excluded-files)

  ;; Exclude built-in packages that use dynamic scoping by design.
  (push "recentf.el" compile-angel-excluded-files)
  (push "savehist.el" compile-angel-excluded-files)
  (push "recentf-save.el" compile-angel-excluded-files)
  ;; A local mode that compiles .el files whenever the user saves them.
  ;; (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode)

  ;; A global mode that compiles .el files before they are loaded.
  (compile-angel-on-load-mode))
#+end_src

** General Behaviour
#+begin_src emacs-lisp
;; Allow for shorter "y" or "n" responses.
(defalias 'yes-or-no-p 'y-or-n-p)

;; Allow nested minibuffers.
(setq enable-recursive-minibuffers t)

;; Keep the cursor out of the read-only portions of the minibuffer.
(setq minibuffer-prompt-properties
      '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; No beeping or blinking on errors.
(setq ring-bell-function 'ignore)
(setq visible-bell nil)

;; Disable the obsolete practice of end-of-line spacing from the typewriter era.
(setq sentence-end-double-space nil)

;; According to POSIX, a line should end with a newline.
(setq require-final-newline t)

;; Move point to top/bottom of buffer before signaling a scrolling error.
(setq scroll-error-top-bottom t)

;; If `scroll-conservatively' is set above 100, the window is never
;; automatically recentered.
(setq scroll-conservatively 101)

;; Number of lines of margin at the top and bottom of a window.
(setq scroll-margin 0)

;; Prefer vertical splits over horizontal ones.
(setq split-width-threshold 170
      split-height-threshold nil)

;; Uniquify buffer names by adding a directory prefix.
(setq uniquify-buffer-name-style 'forward)

;; Delete files by moving them to the system trash.
(setq delete-by-moving-to-trash t)

;; Disable automatic backups and lockfiles.
(setq make-backup-files nil
      create-lockfiles nil)

;; Auto-revert buffers when the underlying file changes.
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
(setq revert-without-query '(".")) ; Do not prompt for revert.

;; Ask the user whether to terminate async compilations on exit.
(setq native-comp-async-query-on-exit t)

;; Skip confirmation prompts when creating a new file or buffer
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

** Setup User
#+begin_src emacs-lisp
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")
#+end_src

** Source Scripts
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'reload-config)
;;(require 'buffer-move)
;; (require 'garbage-collect)
;; (require 'update-packages)
#+end_src

** Frame Title Formatting
#+begin_src emacs-lisp
(setq-default
 frame-title-format
 '(:eval (format "[%%b%s] - %s"
           (if (buffer-modified-p)
                      " â€¢"
             "")
           system-name)))
#+end_src

** Session Management
#+begin_src emacs-lisp
;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(use-package autorevert
  :ensure nil
  :commands (auto-revert-mode global-auto-revert-mode)
  :hook
  (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-remote-files nil)
  (auto-revert-use-notify t)
  (auto-revert-avoid-polling nil)
  (auto-revert-verbose t))

;; Recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(use-package recentf
  :ensure nil
  :commands (recentf-mode recentf-cleanup)
  :hook
  (after-init . recentf-mode)

  :custom
  (recentf-auto-cleanup (if (daemonp) 300 'never))
  (recentf-exclude
   (list "^/\\(?:ssh\\|su\\|sudo\\)?:" ; From minimal-emacs.d
          "\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
          "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
          "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
          "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"))

  :config
  ;; A cleanup depth of -90 ensures that `recentf-cleanup' runs before
  ;; `recentf-save-list', allowing stale entries to be removed before the list
  ;; is saved by `recentf-save-list', which is automatically added to
  ;; `kill-emacs-hook' by `recentf-mode'.
  (add-hook 'kill-emacs-hook #'recentf-cleanup -90))

;; savehist is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(use-package savehist
  :ensure nil
  :commands (savehist-mode savehist-save)
  :hook
  (after-init . savehist-mode)
  :custom
  (savehist-autosave-interval 600)
  (savehist-additional-variables
   '(kill-ring                        ; clipboard
     register-alist                   ; macros
     mark-ring global-mark-ring       ; marks
     search-ring regexp-search-ring)))

;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(use-package saveplace
  :ensure nil
  :commands (save-place-mode save-place-local-mode)
  :hook
  (after-init . save-place-mode)
  :custom
  (save-place-limit 400))

;; Enable `auto-save-mode' to prevent data loss. Use `recover-file' or
;; `recover-session' to restore unsaved changes.
(setq auto-save-default t)

(setq auto-save-interval 300)
(setq auto-save-timeout 30)

;; When auto-save-visited-mode is enabled, Emacs will auto-save file-visiting
;; buffers after a certain amount of idle time if the user forgets to save it
;; with save-buffer or C-x s for example.
;;
;; This is different from auto-save-mode: auto-save-mode periodically saves
;; all modified buffers, creating backup files, including those not associated
;; with a file, while auto-save-visited-mode only saves file-visiting buffers
;; after a period of idle time, directly saving to the file itself without
;; creating backup files.
(setq auto-save-visited-interval 5)   ; Save after 5 seconds if inactivity
(auto-save-visited-mode 1)     
#+end_src


* UI & Theming
** Fonts
#+begin_src emacs-lisp
(defun ar/set-font-faces ()
  "Set all font faces for the current frame."
  ;; Set default, fixed-pitch, and variable-pitch faces to JetBrainsMono Nerd Font
  ;; Height 145 corresponds to 14.5pt. Adjust as needed.
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  ;; Apply italic slant to comments and keywords for visual distinction
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
  (set-language-environment "UTF-8")
  (set-fontset-font t 'unicode "JetBrainsMono Nerd Font" nil 'append)
  (set-fontset-font t 'symbol "JetBrainsMono Nerd Font" nil 'append))


(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame) (with-selected-frame frame (ar/set-font-faces))))
  (ar/set-font-faces))

(setq font-lock-maximum-decoration t)
#+end_src

** Line Numbers 
#+begin_src emacs-lisp
;; probably redundant
;;(global-display-line-numbers-mode -1)
;; Enable line numbers for some modes
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode t))))
#+end_src

** ðŸ“¥ TODO Theming
*Use distinct different colors for bold, italic and underline texts*
#+begin_src emacs-lisp
(use-package doom-themes
  :demand t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  (doom-themes-treemacs-theme "doom-tokyo-night")
  :config
  (load-theme 'doom-tokyo-night t)

  
  ;; Set distinct colors for bold and italic
  (custom-set-faces
   '(bold ((t (:foreground "#7aa2f7" :weight bold))))
   '(italic ((t (:foreground "#bb9af7" :slant italic))))))
#+end_src

#+begin_src emacs-lisp
;; (use-package catppuccin-theme
;;   :demand t  ; Automatically installs the theme if it's not already present
;;   :config
;;   ;; Set the theme variant to 'macchiato' before loading
;;   (setq catppuccin-flavor 'macchiato)
;;   (load-theme 'catppuccin t))
#+end_src

** Solaire Mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :config
  (solaire-global-mode)
  ;; Differentiate popups from "real" buffers
  (add-hook 'completion-list-mode-hook #'solaire-mode)
  (add-hook 'which-key-mode-hook #'solaire-mode)
  (add-hook 'help-mode-hook #'solaire-mode)
  (add-hook 'info-mode-hook #'solaire-mode)
  (add-hook 'org-src-mode-hook #'solaire-mode)
  (advice-add 'vertico--display-candidates :after
              (lambda (&rest _)
                (when (minibufferp)
                  (with-selected-window (minibuffer-window) (solaire-mode +1))))))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "JetBrainsMono Nerd Font")
  (nerd-icons-color-icons t))
#+end_src

** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  ;; Set the icons and other aesthetic features
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-enable-word-count t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-modal-icon t)
  (doom-modeline-lsp-icon t)
  :config
  ;; Set the left and right segments of the modeline
  (setq doom-modeline-segments-left
        '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position parrot selection-info))
  (setq doom-modeline-segments-right
        '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug lsp minor-modes input-method indent-info buffer-encoding major-mode word-count  process vcs checker)))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init (dashboard-setup-startup-hook)
  :custom
  (initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  (dashboard-center-content t)
  (dashboard-items '((recents . 5) (projects . 5) (agenda . 5)))
  (dashboard-startup-banner 'logo)
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode 1)
  :custom
  (which-key-idle-delay 0.1)
  (which-key-separator " â†’ ")
  (which-key-popup-type 'minibuffer))
#+end_src

** Hide Modeline

#+begin_src emacs-lisp
#+end_src

* General Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general
  :demand t
  :after evil
  :config
  (general-create-definer ar/global-leader
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  (ar/global-leader
   ;; Core
   "SPC" '(execute-extended-command :wk "M-x")
   "q q" '(save-buffers-kill-terminal :wk "Quit Emacs")
   "q r" '(ar/reload-config :wk "Reload Config")))
#+end_src

* Evil (Vim Emulation)
** Core Evil
#+begin_src emacs-lisp
  ;; Uncomment the following if you are using undo-fu
  (setq evil-undo-system 'undo-fu)

  ;; Vim emulation
  (use-package evil
    :demand t
    :hook (after-init . evil-mode)
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)

    :custom
    (evil-ex-visual-char-range t)
    (evil-ex-search-vim-style-regexp t)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    (evil-echo-state nil)
    (evil-move-cursor-back nil)
    (evil-v$-excludes-newline t)
    (evil-want-C-h-delete t)
    (evil-want-C-u-delete t)
    (evil-want-fine-undo t)
    (evil-move-beyond-eol t)
    (evil-search-wrap nil)
    (evil-want-Y-yank-to-eol t))
#+end_src

** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :init
  ;; It has to be defined before evil-colllection
  (setq evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))
#+end_src

** Evil Extensions
#+begin_src emacs-lisp
(use-package evil-surround :hook (evil-mode . global-evil-surround-mode))
(use-package evil-nerd-commenter :after evil)

(use-package evil-numbers :after evil)
(use-package evil-args :after evil)
(use-package evil-anzu :after evil)
(use-package evil-exchange :after evil :config (evil-exchange-install))
(use-package evil-indent-plus :after evil :config (evil-indent-plus-default-bindings))
(use-package evil-visualstar :hook (evil-mode . global-evil-visualstar-mode))
(use-package evil-matchit :hook (evil-mode . global-evil-matchit-mode))
(use-package evil-snipe :after evil :config (evil-snipe-mode 1) (evil-snipe-override-mode 1))

(use-package evil-lion
  :after evil
  :hook (prog-mode . evil-lion-mode))

(use-package evil-multiedit :after evil :config (evil-multiedit-default-keybinds))
(use-package evil-goggles :hook (evil-mode . evil-goggles-mode) :custom (evil-goggles-duration 0.1))

(use-package evil-escape
  :hook (evil-mode . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.2)
  (evil-escape-excluded-modes '(dired-mode)))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (evil-define-key '(normal visual) 'global "gc" 'evilnc-comment-or-uncomment-lines))
#+end_src

